//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Default)]
#[sea_orm(table_name = "clan_ally")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub is_ally: bool,
    pub ally_id: Option<i32>,
    pub level: i8,
    pub reputation: i32,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub blood_alliance_count: i16,
    pub blood_oath_count: i16,
    pub leader_id: i32,
    pub auction_bid_at: Option<DateTimeWithTimeZone>,
    pub ally_penalty_expiry_time: Option<DateTimeWithTimeZone>,
    pub ally_penalty_type: i8,
    pub char_penalty_expiry_time: Option<DateTimeWithTimeZone>,
    pub dissolving_expiry_time: Option<DateTimeWithTimeZone>,
    pub crest_id: Option<i32>,
    pub crest_large_id: Option<i32>,
    pub ally_crest_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::castle::Entity")]
    Castle,
    #[sea_orm(
        belongs_to = "super::character::Entity",
        from = "Column::LeaderId",
        to = "super::character::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Character,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::AllyId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::crest::Entity",
        from = "Column::AllyCrestId",
        to = "super::crest::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Crest3,
    #[sea_orm(
        belongs_to = "super::crest::Entity",
        from = "Column::CrestLargeId",
        to = "super::crest::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Crest2,
    #[sea_orm(
        belongs_to = "super::crest::Entity",
        from = "Column::CrestId",
        to = "super::crest::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Crest1,
}

impl Related<super::castle::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Castle.def()
    }
}

impl Related<super::character::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Character.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
