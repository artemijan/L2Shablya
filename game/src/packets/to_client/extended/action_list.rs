use l2_core::data::action_list::ActionList;
use l2_core::shared_packets::write::SendablePacketBuffer;
use macro_common::SendablePacket;
use std::fmt::Debug;

#[derive(Debug, Clone, SendablePacket)]
pub struct BasicActionList {
    pub buffer: SendablePacketBuffer,
}

impl BasicActionList {
    const PACKET_ID: u8 = 0xFE;
    const EX_PACKET_ID: u16 = 0x60;

    pub fn new(al: &ActionList) -> anyhow::Result<Self> {
        //todo: optimization, this is static packet we should cache it
        let mut inst = Self {
            buffer: SendablePacketBuffer::new(),
        };
        inst.buffer.write(Self::PACKET_ID)?;
        inst.buffer.write_u16(Self::EX_PACKET_ID)?;
        inst.buffer.write_u32(u32::try_from(al.actions.len())?)?;
        for al in &al.actions {
            inst.buffer.write_u32(al.id)?;
        }
        Ok(inst)
    }
}

#[cfg(test)]
mod test {
    use crate::packets::to_client::extended::BasicActionList;
    use l2_core::data::action_list::{Action, ActionList};
    use l2_core::shared_packets::common::SendablePacket;

    #[tokio::test]
    async fn test_write_base_action_list() {
        let action_ids = [
            0, 1024, 1, 1025, 2, 1026, 3, 1027, 4, 1028, 5, 1029, 6, 1030, 7, 1031, 8, 1032, 9,
            1033, 10, 1034, 11, 1035, 12, 1036, 13, 1037, 14, 1038, 15, 1039, 16, 1040, 17, 1041,
            18, 1042, 19, 1043, 20, 1044, 21, 1045, 22, 1046, 23, 1047, 24, 1048, 25, 1049, 26,
            1050, 27, 1051, 28, 1052, 29, 1053, 30, 1054, 31, 1055, 32, 1056, 33, 1057, 34, 1058,
            35, 1059, 36, 1060, 37, 1061, 38, 1062, 39, 1063, 40, 1064, 41, 1065, 42, 1066, 43,
            1067, 44, 1068, 45, 1069, 46, 1070, 47, 1071, 48, 1072, 49, 1073, 50, 1074, 1075, 52,
            1076, 53, 1077, 54, 1078, 55, 1079, 56, 1080, 57, 1081, 58, 1082, 59, 1083, 1084, 61,
            62, 1086, 1087, 64, 1088, 65, 1089, 66, 1090, 67, 1091, 68, 1092, 69, 1093, 70, 1094,
            71, 1095, 72, 1096, 73, 1097, 1098, 1099, 76, 1100, 77, 1101, 78, 1102, 79, 1103, 80,
            1104, 81, 82, 1106, 83, 1107, 84, 1108, 85, 1109, 1110, 87, 1111, 88, 89, 1113, 1114,
            1115, 92, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
            1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
            5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013,
            5014, 5015, 5016, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
            1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
        ];
        let mut actions = Vec::new();
        for id in action_ids {
            actions.push(Action{
                id,
                handler: "dummy".to_string(),
                option: None,
            });
        }
        let al = ActionList { actions };
        let p = BasicActionList::new(&al).unwrap();
        assert_eq!(
            [
                254, 96, 0, 242, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 1, 4, 0, 0, 2, 0, 0,
                0, 2, 4, 0, 0, 3, 0, 0, 0, 3, 4, 0, 0, 4, 0, 0, 0, 4, 4, 0, 0, 5, 0, 0, 0, 5, 4, 0,
                0, 6, 0, 0, 0, 6, 4, 0, 0, 7, 0, 0, 0, 7, 4, 0, 0, 8, 0, 0, 0, 8, 4, 0, 0, 9, 0, 0,
                0, 9, 4, 0, 0, 10, 0, 0, 0, 10, 4, 0, 0, 11, 0, 0, 0, 11, 4, 0, 0, 12, 0, 0, 0, 12,
                4, 0, 0, 13, 0, 0, 0, 13, 4, 0, 0, 14, 0, 0, 0, 14, 4, 0, 0, 15, 0, 0, 0, 15, 4, 0,
                0, 16, 0, 0, 0, 16, 4, 0, 0, 17, 0, 0, 0, 17, 4, 0, 0, 18, 0, 0, 0, 18, 4, 0, 0,
                19, 0, 0, 0, 19, 4, 0, 0, 20, 0, 0, 0, 20, 4, 0, 0, 21, 0, 0, 0, 21, 4, 0, 0, 22,
                0, 0, 0, 22, 4, 0, 0, 23, 0, 0, 0, 23, 4, 0, 0, 24, 0, 0, 0, 24, 4, 0, 0, 25, 0, 0,
                0, 25, 4, 0, 0, 26, 0, 0, 0, 26, 4, 0, 0, 27, 0, 0, 0, 27, 4, 0, 0, 28, 0, 0, 0,
                28, 4, 0, 0, 29, 0, 0, 0, 29, 4, 0, 0, 30, 0, 0, 0, 30, 4, 0, 0, 31, 0, 0, 0, 31,
                4, 0, 0, 32, 0, 0, 0, 32, 4, 0, 0, 33, 0, 0, 0, 33, 4, 0, 0, 34, 0, 0, 0, 34, 4, 0,
                0, 35, 0, 0, 0, 35, 4, 0, 0, 36, 0, 0, 0, 36, 4, 0, 0, 37, 0, 0, 0, 37, 4, 0, 0,
                38, 0, 0, 0, 38, 4, 0, 0, 39, 0, 0, 0, 39, 4, 0, 0, 40, 0, 0, 0, 40, 4, 0, 0, 41,
                0, 0, 0, 41, 4, 0, 0, 42, 0, 0, 0, 42, 4, 0, 0, 43, 0, 0, 0, 43, 4, 0, 0, 44, 0, 0,
                0, 44, 4, 0, 0, 45, 0, 0, 0, 45, 4, 0, 0, 46, 0, 0, 0, 46, 4, 0, 0, 47, 0, 0, 0,
                47, 4, 0, 0, 48, 0, 0, 0, 48, 4, 0, 0, 49, 0, 0, 0, 49, 4, 0, 0, 50, 0, 0, 0, 50,
                4, 0, 0, 51, 4, 0, 0, 52, 0, 0, 0, 52, 4, 0, 0, 53, 0, 0, 0, 53, 4, 0, 0, 54, 0, 0,
                0, 54, 4, 0, 0, 55, 0, 0, 0, 55, 4, 0, 0, 56, 0, 0, 0, 56, 4, 0, 0, 57, 0, 0, 0,
                57, 4, 0, 0, 58, 0, 0, 0, 58, 4, 0, 0, 59, 0, 0, 0, 59, 4, 0, 0, 60, 4, 0, 0, 61,
                0, 0, 0, 62, 0, 0, 0, 62, 4, 0, 0, 63, 4, 0, 0, 64, 0, 0, 0, 64, 4, 0, 0, 65, 0, 0,
                0, 65, 4, 0, 0, 66, 0, 0, 0, 66, 4, 0, 0, 67, 0, 0, 0, 67, 4, 0, 0, 68, 0, 0, 0,
                68, 4, 0, 0, 69, 0, 0, 0, 69, 4, 0, 0, 70, 0, 0, 0, 70, 4, 0, 0, 71, 0, 0, 0, 71,
                4, 0, 0, 72, 0, 0, 0, 72, 4, 0, 0, 73, 0, 0, 0, 73, 4, 0, 0, 74, 4, 0, 0, 75, 4, 0,
                0, 76, 0, 0, 0, 76, 4, 0, 0, 77, 0, 0, 0, 77, 4, 0, 0, 78, 0, 0, 0, 78, 4, 0, 0,
                79, 0, 0, 0, 79, 4, 0, 0, 80, 0, 0, 0, 80, 4, 0, 0, 81, 0, 0, 0, 82, 0, 0, 0, 82,
                4, 0, 0, 83, 0, 0, 0, 83, 4, 0, 0, 84, 0, 0, 0, 84, 4, 0, 0, 85, 0, 0, 0, 85, 4, 0,
                0, 86, 4, 0, 0, 87, 0, 0, 0, 87, 4, 0, 0, 88, 0, 0, 0, 89, 0, 0, 0, 89, 4, 0, 0,
                90, 4, 0, 0, 91, 4, 0, 0, 92, 0, 0, 0, 92, 4, 0, 0, 93, 4, 0, 0, 94, 4, 0, 0, 96,
                4, 0, 0, 97, 4, 0, 0, 98, 4, 0, 0, 99, 4, 0, 0, 100, 4, 0, 0, 101, 4, 0, 0, 102, 4,
                0, 0, 103, 4, 0, 0, 104, 4, 0, 0, 105, 4, 0, 0, 106, 4, 0, 0, 107, 4, 0, 0, 108, 4,
                0, 0, 109, 4, 0, 0, 110, 4, 0, 0, 111, 4, 0, 0, 112, 4, 0, 0, 113, 4, 0, 0, 114, 4,
                0, 0, 115, 4, 0, 0, 116, 4, 0, 0, 117, 4, 0, 0, 118, 4, 0, 0, 119, 4, 0, 0, 136,
                19, 0, 0, 137, 19, 0, 0, 138, 19, 0, 0, 139, 19, 0, 0, 140, 19, 0, 0, 141, 19, 0,
                0, 142, 19, 0, 0, 143, 19, 0, 0, 144, 19, 0, 0, 145, 19, 0, 0, 146, 19, 0, 0, 147,
                19, 0, 0, 148, 19, 0, 0, 149, 19, 0, 0, 150, 19, 0, 0, 151, 19, 0, 0, 152, 19, 0,
                0, 232, 3, 0, 0, 233, 3, 0, 0, 234, 3, 0, 0, 235, 3, 0, 0, 236, 3, 0, 0, 237, 3, 0,
                0, 238, 3, 0, 0, 239, 3, 0, 0, 240, 3, 0, 0, 241, 3, 0, 0, 242, 3, 0, 0, 243, 3, 0,
                0, 244, 3, 0, 0, 245, 3, 0, 0, 246, 3, 0, 0, 247, 3, 0, 0, 248, 3, 0, 0, 249, 3, 0,
                0, 250, 3, 0, 0, 251, 3, 0, 0, 252, 3, 0, 0, 253, 3, 0, 0, 254, 3, 0, 0, 255, 3, 0,
                0
            ],
            p.get_buffer().get_data_mut(false)[2..]
        );
    }
}
